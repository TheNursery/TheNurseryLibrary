from pylab import plot, xlabel, ylabel, show, subplot
from scipy import fft, arange, ifft, conj, real
from numpy import sin, linspace, pi, sqrt, array, rint
from scipy.signal import hilbert, firwin, lfilter
from scipy.io.wavfile import read, write
from readWAV import readWAV

MORSE_DICT = {
    'A': '.-',     'B': '-...',   'C': '-.-.', 
    'D': '-..',    'E': '.',      'F': '..-.',
    'G': '--.',    'H': '....',   'I': '..',
    'J': '.---',   'K': '-.-',    'L': '.-..',
    'M': '--',     'N': '-.',     'O': '---',
    'P': '.--.',   'Q': '--.-',   'R': '.-.',
    'S': '...',    'T': '-',      'U': '..-',
    'V': '...-',   'W': '.--',    'X': '-..-',
    'Y': '-.--',   'Z': '--..',
    
    '0': '-----',  '1': '.----',  '2': '..---',
    '3': '...--',  '4': '....-',  '5': '.....',
    '6': '-....',  '7': '--...',  '8': '---..',
    '9': '----.',  ' ': '/'
    }

INV_MORSE = dict((v, k) for k, v in MORSE_DICT.iteritems())

def plotSpectru(y, Fs):
    n = len(y) # lungime semnal
    k = arange(n)
    T = n/Fs
    frq = k/T # two sides frequency range
    frq = frq[range(n/2)] # one side frequency range
    
    Y = fft(y)/n # fft computing and normalization
    Y = Y[range(n/2)]
    
    plot(frq,abs(Y),'r') # plotting the spectrum
    xlabel('Freq (Hz)')
    ylabel('|Y(freq)|')

def envelope(data):
    
    data = data - sum(data)/len(data)
    
    print sum(data)/len(data)

    env = sqrt(data**2 + hilbert(data)*conj(hilbert(data)))
    return env

def envelope2(data, Fs):
    N = 10
    Fc = 10
    h = firwin(numtaps=N, cutoff=Fc, nyq = Fs/2)
    y = lfilter(h, 1.0, data)
    return y

def truncate(env):
    maxdata = max(env)
    for i in range(len(env)):
        if (env[i] > 0.4*maxdata):
            env[i] = maxdata
        else:
            env[i] = -maxdata
    return env

def lengths(data):
    l = 0
    lens = []
    for i in range(len(data)-1):
        l = l + 1
        if data[i] * data[i+1] < 0:
            if data[i] < 0:
                lens.append(-l)
            else:
                lens.append(l)
            l = 0

    lens = array(lens)
    lens = rint(lens / float(min(abs(lens))))

    return lens

def morse(lens):
    morse_list = []
    i = 0
    while i < len(lens):
        if (lens[i] > 0):
            if lens[i] < 2.0:
                morse_list.append('.')
                i = i + 1
            else:
                morse_list.append('-')
                i = i + 1
        else:
            if (lens[i] < -2.0) and (lens[i] > -5.0):
                morse_list.append(' ')
            elif (lens[i] < -6.0):
                morse_list.append(' / ')
            i = i + 1
        
    morse_str = ''.join(morse_list)
    morse_strs = morse_str.split(' ')
    return morse_strs
     
def getascii(morse):
    asc = []
    for str in morse:
        try:
            asc.append(INV_MORSE[str])
        except: 
            pass
    ascstr = ''.join(asc)
    return ascstr
    
Fs = 44100;  # sampling rate

filename = 'cw10.wav'
try:
    rate, data = read(filename)
except:
    data=readWAV(filename)

if len(data.shape) > 1:
    data = data[:,1]

y=data
avg = sum(y)/len(y)
print avg
ynew = y - avg
y1 = envelope2(y, Fs)
y1 = truncate(real(y1))
#lungime=len(y)
timp=len(y)/float(Fs)
t=linspace(0,timp,len(y))

subplot(3, 1, 1)
plot(t,y1)
xlabel('Time')
ylabel('Amplitude')
subplot(3, 1, 2)
plot(t, y, 'r')
plot(t, ynew, 'b')
xlabel('Time')
ylabel('Amplitude')
subplot(3, 1, 3)
plotSpectru(y, Fs)
show()

lns = lengths(y1)
print lns

mrstrs = morse(lns)
print mrstrs

message = getascii(mrstrs)
print(message)
